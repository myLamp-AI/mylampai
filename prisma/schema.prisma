generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String?   @unique
  first_name     String?
  last_name      String?
  phone          String?
  hashedPassword String?
  role           String?
  posts          Modules[]
  userInfo       UserInfo?
  accounts       Account[] 

  communityIds String[]    @db.ObjectId
  communities  Community[] @relation(fields: [communityIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  messages Message[]
  sentmessages  Directmessage[] @relation("SenderUser")

  receivedMessages Directmessage[] @relation("ReceiverUser")
  otps           OTP[]
}

model OTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  otp       String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  verified  Boolean  @default(false)
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model UserInfo {
  id                     String  @id @default(auto()) @map("_id") @db.ObjectId
  country                String?
  college                String?
  degree                 String?
  branch                 String?
  areaOfStudy            String?
  expectedGraduationDate String?
  goal                   String?
  skills                 String?
  headline               String?
  userId                 String  @unique @db.ObjectId
  user                   User    @relation(fields: [userId], references: [id])
}

model Modules {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  Module_Name    String     @unique
  No_of_Chapters String
  No_of_Lessons  String
  No_of_Weeks    String
  No_of_Credits  String
  Projects       String
  author         User       @relation(fields: [authorId], references: [id])
  authorId       String     @db.ObjectId
  chapters       Chapters[]
}

model Chapters {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  Chapter_Name String
  Lessons      String
  chapter      Modules  @relation(fields: [chapterId], references: [id])
  chapterId    String   @db.ObjectId
  lessons      Lesson[]
}

model Lesson {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  Lesson_Name   String
  lab           String?
  content_url   String
  video_url     String
  Assesment_url String
  chapter       Chapters @relation(fields: [chapterId], references: [id])
  chapterId     String   @db.ObjectId
}

model Community {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastmessageAt DateTime @default(now())
  name          String   @unique
  description   String?
  isCommunity   Boolean?

  messagesIds String?   @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  type      String
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  communityId String    @db.ObjectId
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

}

model Directmessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  seen      Boolean?   

  receiverId String    @db.ObjectId
  receiver   User      @relation("ReceiverUser", fields: [receiverId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation("SenderUser", fields: [senderId], references: [id], onDelete: Cascade)
}
model Blog {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  authorName  String
  position    String
  sections    Section[]
  tags        String[]
}

model Section {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  blogId     String
  subheading String
  content    String
  blog       Blog   @relation(fields: [blogId], references: [id])
}
